name: Changelog Automation

on:
  schedule:
    - cron: '0 8 * * *'  # Daily at midnight PST (08:00 UTC)
  workflow_dispatch:  # Manual trigger for testing
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  update-changelog:
    if: |
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if should skip
        id: skip_check
        run: |
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$LAST_COMMIT_MSG" | grep -qE "chore: update changelog|^\[skip changelog\]"; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping - last commit is changelog automation"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "✅ Proceeding with changelog update"
          fi

      - name: Update Changelog [Unreleased] and Statistics
        if: steps.skip_check.outputs.skip != 'true'
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          prompt: |
            Update CHANGELOG.md [Unreleased] section and statistics with new commits.

            **Goal:** Add new commits to changelog and update statistics, then commit and push.

            **Tasks:**

            1. **Deduplicate existing content (idempotent safety):**

               Before making any changes, scan CHANGELOG.md for duplicate entries:

               a. Extract all commit hashes from [Unreleased] section and Development History
               b. Check for duplicates:
                  ```bash
                  grep -oP '- \K[a-f0-9]{7}' CHANGELOG.md | sort | uniq -d
                  ```
               c. If duplicates found in [Unreleased]: keep first occurrence, remove others
               d. If duplicate week sections found (same "Week of YYYY-MM-DD"):
                  - Consolidate into one section
                  - Combine commit lists
                  - Merge focus lines (unique themes only)
                  - Update commit count
               e. If duplicate hashes within Development History weeks: keep first occurrence

               This ensures the file is clean before adding new content.

            2. **Find new commits:** Read CHANGELOG.md Development History section, find the most recent commit hash (first 7-char hash starting with "- "). Get all commits since that hash using git log.

            3. **Update [Unreleased] section:** For each new commit:
               - Skip if type is "chore:", "test:", or "style:"
               - Add to appropriate category: "feat:" → Added, "fix:" → Fixed, "refactor:/perf:" → Changed, "docs:" → Changed
               - Format: `- {Component}: {Description} - {Details} ({N} files, {N} insertions)`
               - Match the existing detailed style in the file
               - Place newest entries at top of each category
               - Use git show --stat to get file/line counts

            4. **Update Statistics section (at bottom of file):**
               - Total Commits: count with git rev-list --count HEAD
               - Date Range: first and last commit dates
               - Commit Type Distribution: count each type (feat, fix, refactor, docs, perf, test, chore, style), calculate percentages

            5. **Commit and push:**
               ```bash
               git config user.name "github-actions[bot]"
               git config user.email "github-actions[bot]@users.noreply.github.com"
               git add CHANGELOG.md
               git commit -m "chore: update changelog [unreleased] and statistics [skip ci]" -m "Generated with Claude Code GitHub Action"
               git push
               ```

            **Important:** Do NOT modify Development History section. Use `[skip ci]` in commit message.

          claude_args: |
            --max-turns 50
            --model claude-sonnet-4-5-20250929
            --allowedTools "Read,Edit,Write,Bash(git:*),Bash(grep:*),Bash(awk:*),Bash(date:*),Bash(echo:*),Bash(head:*),Bash(tail:*),Bash(wc:*),Bash(cut:*)"
