name: AI Artifact Auto-Cleanup

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

permissions:
  contents: write      # To commit and push
  pull-requests: write # To comment
  id-token: write      # For OIDC

jobs:
  ai-cleanup:
    # Run on PR events OR when someone uses @claude-artifacts keyword
    if: |
      github.event_name == 'pull_request' ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '@claude-artifacts'))

    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.event.issue.pull_request.head.ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: AI-Powered Artifact Detection and Removal
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          prompt: |
            **MISSION:** Clean AI workflow artifacts from this PR before merging to main.

            **CONTEXT:**
            - PR Number: ${{ github.event.pull_request.number || github.event.issue.number }}
            - Base Branch: main
            - This project uses AI-assisted development (BMAD, PRP, Claude Code, etc.)
            - Contributors commit artifacts to feature branches for AI context
            - Artifacts must NOT be merged to main

            **YOUR TASK:**

            1. **Understand Project Context:**
               - Read CLAUDE.md in project root if it exists (project-specific guidelines)
               - Read CONTRIBUTING.md section on AI artifacts if present
               - Understand what this project considers artifacts
               - Check .claude/artifact-exceptions.txt for learned exceptions

            2. **Analyze Changed Files:**
               - Use: `gh pr diff ${{ github.event.pull_request.number || github.event.issue.number }} --name-only`
               - Get list of all files changed in this PR

            3. **Semantic Analysis (For Each File):**

               Read each file and determine if it's an artifact by analyzing:

               **Content Indicators (High Priority):**
               - Contains PRP formatting, BMAD markers, or tool-specific headers
               - AI conversation logs, prompt engineering content
               - "Auto-generated by [AI tool]" comments
               - References to AI workflows in file content

               **Structural Indicators:**
               - File structure matches known artifact patterns:
                 - PRP: *.prp.md, PRPs/, INITIAL.md, context-*.md
                 - BMAD: flattened-codebase.xml, docs/stories/story-*.md
                 - Tools: .cursor/, .aider/, .claude/conversation-*.json

               **Context Clues:**
               - Is this in a typical project directory (src/, docs/) or AI directory?
               - Does filename/location suggest production code vs. workflow artifact?
               - Are there similar legitimate files in the project?

               **Legitimacy Check:**
               - Does this file serve the project's core functionality?
               - Is it referenced by production code?
               - Is it part of actual documentation vs. AI planning?

            4. **Classification (Be Intelligent):**

               For EACH file, decide:

               **ARTIFACT (Remove):**
               - Clear AI workflow file (PRP, BMAD, conversation log)
               - Tool-specific config that's personal (not project-wide)
               - Planning/context files for AI assistants

               **LEGITIMATE (Keep):**
               - Production code (src/, lib/, etc.)
               - Real project documentation
               - Configuration that benefits all contributors
               - Tests, build files, etc.

               **UNCERTAIN (Ask):**
               - Could be either depending on project conventions
               - File matches pattern but content is ambiguous
               - Need maintainer input to decide

            5. **Execute Removal (High-Confidence Only):**

               For files you're CERTAIN are artifacts:

               ```bash
               # Remove artifact files
               git rm file1.prp.md file2.xml dir/

               # Create descriptive commit
               git config user.name "claude-artifact-cleanup[bot]"
               git config user.email "claude-artifact-cleanup[bot]@users.noreply.github.com"

               git commit -m "chore: remove AI workflow artifacts [bot]" \
                 -m "Automatically removed by Claude Code analysis:" \
                 -m "- file1.prp.md (PRP artifact)" \
                 -m "- file2.xml (BMAD flattened codebase)" \
                 -m "" \
                 -m "Generated with Claude Code GitHub Action"

               # Push to PR branch
               git push origin ${{ github.event.pull_request.head.ref || github.event.issue.pull_request.head.ref }}
               ```

            6. **Post Comprehensive PR Comment:**

               Use: `gh pr comment ${{ github.event.pull_request.number || github.event.issue.number }} --body "..."`

               Include in your comment:

               ```markdown
               ## ü§ñ AI Artifact Analysis Complete

               ### ‚úÖ Removed (High Confidence)

               | File | Reason | Evidence |
               |------|--------|----------|
               | file1.prp.md | PRP artifact | Contains PRP template markers, references Claude prompts |
               | flattened-codebase.xml | BMAD artifact | XML structure matches BMAD codebase flattener output |

               ### üü¢ Kept (Legitimate Files)

               | File | Reason |
               |------|--------|
               | docs/architecture.md | Real architecture documentation - contains system design decisions, no AI markers |
               | src/context-manager.ts | Production code - application context management class |

               ### ‚ùì Uncertain - Maintainer Review Needed

               | File | Question | Why Uncertain |
               |------|----------|---------------|
               | docs/planning.md | Is this AI planning or project planning? | Filename suggests artifact but content describes actual project roadmap |

               **If uncertain files exist:** Please review and respond:

               **For specific file decisions (use general @claude):**
               - `@claude keep docs/planning.md - this is our project roadmap, not AI planning`
               - `@claude remove docs/planning.md - that's an AI artifact`
               - Claude will learn from your feedback and update exceptions automatically

               **To trigger full re-analysis (use @claude-artifacts):**
               - `@claude-artifacts re-check` - Runs complete artifact analysis again

               ---

               **Summary:**
               - ‚úÖ Removed: X files
               - üü¢ Kept: Y files
               - ‚ùì Uncertain: Z files

               **Next Steps:**
               - If no uncertain files: PR is clean and ready! ‚ú®
               - If uncertain files: Awaiting maintainer decision
               ```

            7. **Learn and Improve (Automatic):**

               After posting your analysis, if you removed files OR found uncertain files:

               - Create/update `.claude/artifact-exceptions.txt` with patterns discovered
               - For each uncertain file, add a line with the pattern and question
               - This builds institutional knowledge for future PRs
               - Format: `pattern # reason - PR #X - Date`

               Example entries:
               ```
               docs/architecture.md # Real architecture docs, not BMAD - PR #123 - 2025-10-08
               src/context-*.ts # Application context managers, not AI - PR #125 - 2025-10-08
               ```

            **IMPORTANT GUIDELINES:**

            - **Be Conservative:** When in doubt, mark as UNCERTAIN rather than removing
            - **Read Content:** Don't just pattern-match filenames - understand what's inside
            - **Explain Reasoning:** For every decision, explain your evidence
            - **Learn from CLAUDE.md:** Respect project-specific artifact definitions in root directory
            - **Build Knowledge:** Always update artifact-exceptions.txt with learnings
            - **Handle Edge Cases:**
              - New AI tools you don't recognize? Analyze content for AI markers
              - File could be either? Mark as UNCERTAIN for maintainer review
              - Legitimate file matching pattern? Keep it, explain why, add to exceptions

            **OUTPUT FORMAT:**

            You MUST post a PR comment (even if no artifacts found). Your comment should be:
            - Structured with checkboxes showing progress (use track_progress)
            - Evidence-based (explain your reasoning in tables)
            - Actionable (clear instructions for maintainer responses)

            **RESPONSE INSTRUCTIONS FOR MAINTAINER:**

            In your comment, instruct maintainers on how to respond:
            - For specific file decisions: Use `@claude` (handled by general workflow)
            - For full re-analysis: Use `@claude-artifacts re-check`

            This prevents workflow conflicts and provides clear interaction patterns.

          track_progress: true  # Enable real-time comment updates with checkboxes

          claude_args: |
            --max-turns 50
            --model claude-sonnet-4-5-20250929
            --allowedTools "Read,Edit,Write,Glob,Grep,Bash(git:*),Bash(gh pr:*),Bash(gh issue:*),Bash(test:*),Bash(ls:*),Bash(head:*),Bash(tail:*),Bash(cat:*),Bash(mkdir:*),Bash(touch:*)"
