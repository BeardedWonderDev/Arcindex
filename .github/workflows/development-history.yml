name: Development History Update

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:  # Manual trigger

jobs:
  update-development-history:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new commits
        id: check_commits
        run: |
          LAST_LOGGED=$(grep -oP "^- \K[a-f0-9]{7}" CHANGELOG.md | head -1 || echo "")

          if [ -z "$LAST_LOGGED" ]; then
            NEW_COUNT=$(git rev-list --count HEAD)
          else
            NEW_COUNT=$(git rev-list --count ${LAST_LOGGED}..HEAD)
          fi

          echo "new_count=$NEW_COUNT" >> $GITHUB_OUTPUT

          if [ "$NEW_COUNT" -gt 0 ]; then
            echo "has_new=true" >> $GITHUB_OUTPUT
            echo "✅ Found $NEW_COUNT new commits to add to Development History"
          else
            echo "has_new=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No new commits to process"
          fi

      - name: Update Development History
        if: steps.check_commits.outputs.has_new == 'true'
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          prompt: |
            Update CHANGELOG.md Development History section with new commits grouped by week.

            **Goal:** Add new commits to Development History, organized by week, then commit and push.

            **Tasks:**

            1. **Find new commits:** Read CHANGELOG.md Development History section, find the most recent commit hash (first 7-char hash in a line starting with "- "). Get all commits since that hash using git log.

            2. **Group commits by week (Monday-Sunday):** For each new commit, determine which week it belongs to. Calculate the Monday date for that week.

            3. **Update Development History section:**
               - Create or update week sections: `### Week of YYYY-MM-DD (X commits)`
               - Add each commit as: `- {hash}: {type}: {description} ({YYYY-MM-DD})`
               - Ordering: Newest weeks first, newest commits first within each week
               - Place new/updated weeks at TOP of Development History section

            4. **Generate Focus lines:** For each week section being created/updated:
               - Analyze commit messages in that week
               - Identify 2-3 main themes based on commit types and keywords
               - Weight important commits more (feat > fix > refactor > docs)
               - Format as: `**Focus:** theme1, theme2, theme3`
               - Use lowercase, gerund/noun phrases (e.g., "quality validation enhancements")

            5. **Commit and push:**
               ```bash
               git config user.name "github-actions[bot]"
               git config user.email "github-actions[bot]@users.noreply.github.com"
               git add CHANGELOG.md
               git commit -m "chore: update changelog development history [skip ci]" -m "Generated with Claude Code GitHub Action"
               git push
               ```

            **Important:** Do NOT modify [Unreleased] or Statistics sections. Use `[skip ci]` in commit message.

          claude_args: |
            --max-turns 35
            --model claude-sonnet-4-5-20250929
            --allowedTools "Read,Edit,Write,Bash(git:*),Bash(grep:*),Bash(awk:*),Bash(date:*),Bash(echo:*),Bash(head:*),Bash(tail:*),Bash(wc:*),Bash(cut:*)"
