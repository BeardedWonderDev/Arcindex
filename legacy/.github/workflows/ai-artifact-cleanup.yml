name: AI Artifact Auto-Cleanup

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to analyze and clean (default: main)'
        required: false
        type: string
        default: 'main'
      strategy:
        description: 'Cleanup strategy: create-pr (safe, default) or push-direct (fast)'
        required: true
        type: choice
        options:
          - 'create-pr'
          - 'push-direct'
        default: 'create-pr'
      dry_run:
        description: 'Analyze only, make no changes (testing mode)'
        required: false
        type: boolean
        default: false
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

permissions:
  contents: write      # To commit and push
  pull-requests: write # To comment
  id-token: write      # For OIDC

jobs:
  ai-cleanup:
    # Run on PR events (except artifact-cleanup branches) OR @claude-artifacts keyword OR manual trigger
    if: |
      (github.event_name == 'pull_request' && !startsWith(github.head_ref, 'artifact-cleanup-')) ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '@claude-artifacts'))

    runs-on: ubuntu-latest

    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && inputs.target_branch || github.event.pull_request.head.ref || github.event.issue.pull_request.head.ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: AI-Powered Artifact Detection and Removal
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          prompt: |
            **MISSION:** Clean AI workflow artifacts from this repository.

            **TRIGGER CONTEXT:**
            - Event Type: ${{ github.event_name }}
            - Target Branch: ${{ github.event_name == 'workflow_dispatch' && inputs.target_branch || github.event.pull_request.head.ref || github.event.issue.pull_request.head.ref }}
            - Strategy: ${{ github.event_name == 'workflow_dispatch' && inputs.strategy || 'pr-branch-push' }}
            - Dry Run: ${{ github.event_name == 'workflow_dispatch' && inputs.dry_run || 'false' }}
            - PR Number: ${{ github.event.pull_request.number || github.event.issue.number || 'N/A (manual trigger)' }}

            **EXECUTION MODE:**

            ${{ github.event_name == 'workflow_dispatch' && inputs.dry_run == 'true' && '
            üß™ **DRY RUN MODE - ANALYSIS ONLY**

            - DO NOT make any changes to the repository
            - DO NOT run git rm, git commit, or git push commands
            - Analyze files and generate detailed report showing what WOULD be changed
            - Post summary to workflow output showing:
              * Files that would be removed (with evidence)
              * Files that would be kept (with rationale)
              * Uncertain files requiring review
            - This is for testing and validation purposes only

            Skip to step 6 (Post Comprehensive Report) but output to console instead of PR comment.
            ' || '' }}

            ${{ github.event_name == 'workflow_dispatch' && inputs.strategy == 'create-pr' && inputs.dry_run != 'true' && '
            üìù **CREATE PR MODE - SAFE CLEANUP**

            After identifying artifacts (steps 1-4), you will:

            - Create new branch: `artifact-cleanup-$(date +%Y%m%d-%H%M%S)`
            - Commit artifact removals to new branch
            - Push new branch to origin
            - Create pull request using:
              ```bash
              BRANCH_NAME="artifact-cleanup-$(date +%Y%m%d-%H%M%S)"
              git checkout -b "$BRANCH_NAME"

              # ... perform artifact removal ...

              git config user.name "claude-artifact-cleanup[bot]"
              git config user.email "claude-artifact-cleanup[bot]@users.noreply.github.com"
              git add -A
              git commit -m "chore: remove AI workflow artifacts [bot]" \
                -m "Automated cleanup of AI workflow artifacts" \
                -m "" \
                -m "Files removed: [list key files]" \
                -m "" \
                -m "Generated with Claude Code GitHub Action"

              git push origin "$BRANCH_NAME"

              # Create PR with detailed body
              gh pr create \
                --base main \
                --head "$BRANCH_NAME" \
                --title "chore: automated AI artifact cleanup" \
                --body "$(cat <<EOF
              ## ü§ñ Automated Artifact Cleanup

              This PR removes AI workflow artifacts identified by semantic analysis.

              ### üìã Summary
              - Removed: X files
              - Total: Y artifacts cleaned

              ### üîç Analysis
              [Include summary table of removed files with evidence]

              ### ‚úÖ Review Instructions
              Please review the removed files to ensure no legitimate files were incorrectly classified as artifacts.

              ---
              Generated with Claude Code GitHub Action
              EOF
              )"
              ```

            This creates a reviewable PR instead of direct push to main.
            ' || '' }}

            ${{ github.event_name == 'workflow_dispatch' && inputs.strategy == 'push-direct' && inputs.dry_run != 'true' && '
            ‚ö° **DIRECT PUSH MODE - IMMEDIATE CLEANUP**

            After identifying artifacts (steps 1-4), you will:

            - Remove artifacts directly from current branch (${{ inputs.target_branch }})
            - Commit changes with [skip ci] to prevent workflow loops
            - Push directly to origin/${{ inputs.target_branch }}

            Use this commit format:
            ```bash
            git config user.name "claude-artifact-cleanup[bot]"
            git config user.email "claude-artifact-cleanup[bot]@users.noreply.github.com"

            git rm <artifact-files>

            git commit -m "chore: remove AI workflow artifacts [bot] [skip ci]" \
              -m "Automated cleanup - direct push to ${{ inputs.target_branch }}" \
              -m "Files removed: [list]" \
              -m "" \
              -m "Generated with Claude Code GitHub Action"

            git push origin ${{ inputs.target_branch }}
            ```

            ‚ö†Ô∏è Changes are immediate and bypass code review.
            ' || '' }}

            ${{ github.event_name != 'workflow_dispatch' && '
            üì¶ **PR BRANCH MODE - STANDARD CLEANUP**

            This is a standard PR workflow. After identifying artifacts (steps 1-4):

            - Remove artifacts from PR branch
            - Commit and push to PR branch (existing behavior)
            - Post analysis comment to PR

            Standard PR cleanup workflow continues as normal...
            ' || '' }}

            **PROJECT CONTEXT:**
            - This project uses AI-assisted development (BMAD, PRP, Claude Code, etc.)
            - Contributors commit artifacts to feature branches for AI context
            - Artifacts must NOT be merged to main
            - Base Branch: main

            **YOUR TASK:**

            1. **Understand Project Context:**
               - Read CLAUDE.md in project root if it exists (project-specific guidelines)
               - Read CONTRIBUTING.md section on AI artifacts if present
               - Understand what this project considers artifacts
               - Check .claude/artifact-exceptions.txt for learned exceptions

            2. **Analyze Files:**

               **For PR events:**
               - Use: `gh pr diff ${{ github.event.pull_request.number || github.event.issue.number }} --name-only`
               - Get list of all files changed in this PR

               **For manual trigger (workflow_dispatch):**
               - Use: `git diff --name-only main...HEAD` (if not on main)
               - Or use: `git ls-files` to analyze all tracked files
               - Focus on common artifact locations: docs/, PRPs/, .bmad-core/, *.prp.md

            3. **Semantic Analysis (For Each File):**

               Read each file and determine if it's an artifact by analyzing:

               **Content Indicators (High Priority):**
               - Contains PRP formatting, BMAD markers, or tool-specific headers
               - AI conversation logs, prompt engineering content
               - "Auto-generated by [AI tool]" comments
               - References to AI workflows in file content

               **Structural Indicators:**
               - File structure matches known artifact patterns:
                 - PRP: *.prp.md, PRPs/, INITIAL.md, context-*.md
                 - BMAD: flattened-codebase.xml, docs/stories/story-*.md
                 - Tools: .cursor/, .aider/, .claude/conversation-*.json

               **Context Clues:**
               - Is this in a typical project directory (src/, docs/) or AI directory?
               - Does filename/location suggest production code vs. workflow artifact?
               - Are there similar legitimate files in the project?

               **Legitimacy Check:**
               - Does this file serve the project's core functionality?
               - Is it referenced by production code?
               - Is it part of actual documentation vs. AI planning?

            4. **Classification (Be Intelligent):**

               For EACH file, decide:

               **ARTIFACT (Remove):**
               - Clear AI workflow file (PRP, BMAD, conversation log)
               - Tool-specific config that's personal (not project-wide)
               - Planning/context files for AI assistants

               **LEGITIMATE (Keep):**
               - Production code (src/, lib/, etc.)
               - Real project documentation
               - Configuration that benefits all contributors
               - Tests, build files, etc.

               **UNCERTAIN (Ask):**
               - Could be either depending on project conventions
               - File matches pattern but content is ambiguous
               - Need maintainer input to decide

            5. **Execute Removal (High-Confidence Only):**

               **‚ö†Ô∏è CRITICAL: Only execute if NOT in dry run mode**

               For files you're CERTAIN are artifacts, follow the execution mode instructions from above:

               - **Dry Run Mode:** Skip execution, proceed to step 6 for reporting
               - **Create PR Mode:** Create branch, commit, push, create PR (see EXECUTION MODE section)
               - **Direct Push Mode:** Commit and push to current branch (see EXECUTION MODE section)
               - **PR Branch Mode:** Use existing behavior below

               **Standard PR Branch Execution:**
               ```bash
               # Remove artifact files
               git rm file1.prp.md file2.xml dir/

               # Create descriptive commit
               git config user.name "claude-artifact-cleanup[bot]"
               git config user.email "claude-artifact-cleanup[bot]@users.noreply.github.com"

               git commit -m "chore: remove AI workflow artifacts [bot]" \
                 -m "Automatically removed by Claude Code analysis:" \
                 -m "- file1.prp.md (PRP artifact)" \
                 -m "- file2.xml (BMAD flattened codebase)" \
                 -m "" \
                 -m "Generated with Claude Code GitHub Action"

               # Push to PR branch
               git push origin ${{ github.event.pull_request.head.ref || github.event.issue.pull_request.head.ref }}
               ```

            6. **Post Analysis Report:**

               **For PR events:**
               - Use: `gh pr comment ${{ github.event.pull_request.number || github.event.issue.number }} --body "..."`
               - Post detailed analysis as PR comment

               **For manual trigger with create-pr strategy:**
               - Analysis is included in the created PR body
               - No separate comment needed

               **For manual trigger with push-direct or dry-run:**
               - Output analysis to console/workflow logs
               - Use echo or cat to display analysis
               - Format for readability in GitHub Actions logs

               **Report Format** (adapt based on output destination):

               Include in your report:

               ```markdown
               ## ü§ñ AI Artifact Analysis Complete

               ### ‚úÖ Removed (High Confidence)

               | File | Reason | Evidence |
               |------|--------|----------|
               | file1.prp.md | PRP artifact | Contains PRP template markers, references Claude prompts |
               | flattened-codebase.xml | BMAD artifact | XML structure matches BMAD codebase flattener output |

               ### üü¢ Kept (Legitimate Files)

               | File | Reason |
               |------|--------|
               | docs/architecture.md | Real architecture documentation - contains system design decisions, no AI markers |
               | src/context-manager.ts | Production code - application context management class |

               ### ‚ùì Uncertain - Maintainer Review Needed

               | File | Question | Why Uncertain |
               |------|----------|---------------|
               | docs/planning.md | Is this AI planning or project planning? | Filename suggests artifact but content describes actual project roadmap |

               **If uncertain files exist:** Please review and respond:

               **For specific file decisions (use general @claude):**
               - `@claude keep docs/planning.md - this is our project roadmap, not AI planning`
               - `@claude remove docs/planning.md - that's an AI artifact`
               - Claude will learn from your feedback and update exceptions automatically

               **To trigger full re-analysis (use @claude-artifacts):**
               - `@claude-artifacts re-check` - Runs complete artifact analysis again

               ---

               **Summary:**
               - ‚úÖ Removed: X files
               - üü¢ Kept: Y files
               - ‚ùì Uncertain: Z files

               **Next Steps:**
               - If no uncertain files: PR is clean and ready! ‚ú®
               - If uncertain files: Awaiting maintainer decision
               ```

            7. **Learn and Improve (Automatic):**

               After posting your analysis, if you removed files OR found uncertain files:

               - Create/update `.claude/artifact-exceptions.txt` with patterns discovered
               - For each uncertain file, add a line with the pattern and question
               - This builds institutional knowledge for future PRs
               - Format: `pattern # reason - PR #X - Date`

               Example entries:
               ```
               docs/architecture.md # Real architecture docs, not BMAD - PR #123 - 2025-10-08
               src/context-*.ts # Application context managers, not AI - PR #125 - 2025-10-08
               ```

            **IMPORTANT GUIDELINES:**

            - **Be Conservative:** When in doubt, mark as UNCERTAIN rather than removing
            - **Read Content:** Don't just pattern-match filenames - understand what's inside
            - **Explain Reasoning:** For every decision, explain your evidence
            - **Learn from CLAUDE.md:** Respect project-specific artifact definitions in root directory
            - **Build Knowledge:** Always update artifact-exceptions.txt with learnings
            - **Handle Edge Cases:**
              - New AI tools you don't recognize? Analyze content for AI markers
              - File could be either? Mark as UNCERTAIN for maintainer review
              - Legitimate file matching pattern? Keep it, explain why, add to exceptions

            **OUTPUT FORMAT:**

            **For PR events:**
            - You MUST post a PR comment (even if no artifacts found)
            - Comment should be structured with checkboxes showing progress
            - Evidence-based with reasoning in tables
            - Actionable with clear instructions for maintainer responses

            **For manual triggers:**
            - **create-pr:** Include analysis in PR body when creating the PR
            - **push-direct:** Output summary to workflow logs (use echo)
            - **dry-run:** Output detailed analysis to workflow logs

            Your output should be:
            - Structured with checkboxes showing progress (use track_progress)
            - Evidence-based (explain your reasoning in tables)
            - Actionable (clear instructions for next steps)

            **RESPONSE INSTRUCTIONS FOR MAINTAINER:**

            In your comment, instruct maintainers on how to respond:
            - For specific file decisions: Use `@claude` (handled by general workflow)
            - For full re-analysis: Use `@claude-artifacts re-check`

            This prevents workflow conflicts and provides clear interaction patterns.

          track_progress: ${{ github.event_name != 'workflow_dispatch' }}  # Enable for PR events only

          claude_args: |
            --max-turns 50
            --model claude-sonnet-4-5-20250929
            --allowedTools "Read,Edit,Write,Glob,Grep,Bash(git:*),Bash(gh pr:*),Bash(gh issue:*),Bash(test:*),Bash(ls:*),Bash(head:*),Bash(tail:*),Bash(cat:*),Bash(mkdir:*),Bash(touch:*)"
