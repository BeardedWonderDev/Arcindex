name: Roadmap Update

on:
  schedule:
    - cron: '0 8 * * *'  # Daily at midnight PST (08:00 UTC)
  workflow_dispatch:  # Manual trigger for testing
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  update-roadmap:
    if: |
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if should skip
        id: skip_check
        run: |
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$LAST_COMMIT_MSG" | grep -qE "chore: update roadmap|^\[skip roadmap\]"; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping - last commit is roadmap automation"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "✅ Proceeding with roadmap update"
          fi

      - name: Update Roadmap Progress
        if: steps.skip_check.outputs.skip != 'true'
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          prompt: |
            Update ROADMAP.md to reflect completed tasks based on recent commits.

            **Goal:** Mark completed tasks and commit changes if updates are made.

            **Tasks:**

            1. **Deduplicate task lines (idempotent safety):**

               Before updating task completion, clean any duplicate task entries:

               a. Scan ROADMAP.md for duplicate task lines (same task description, ignoring checkbox state)
               b. Check for duplicates:
                  ```bash
                  grep -oP '- \[.\] \K.*' ROADMAP.md | sort | uniq -d
                  ```
               c. For each set of duplicate tasks:
                  - If any version has [x]: keep the [x] version, remove all [ ] duplicates
                  - If all are [x] or all are [ ]: keep first occurrence, remove duplicates
                  - Preserve section structure and task ordering
               d. Ensure no task appears more than once in the file

               This ensures clean task list before marking completions.

            2. **Analyze recent commits:** Find commits since last "chore: update roadmap" commit (or from beginning if none). Review commit messages and changes to identify completed roadmap tasks.

            3. **Update task completion:** For each completed task in ROADMAP.md, change `- [ ]` to `- [x]` or add `✅` prefix. Only mark tasks as complete if commits clearly implement them - be conservative with partial implementations.

            4. **Check for new features:** Review CHANGELOG.md [Unreleased] section for significant features not in roadmap. Add them to appropriate future versions (v0.2.0+) if they represent major unplanned capabilities.

            5. **Version readiness check:** Count remaining v0.1.0 tasks. If <5 remaining, add note: "**v0.1.0 Status:** Near completion - X tasks remaining". Do NOT bump version numbers.

            6. **Commit and push changes:**
               ```bash
               git config user.name "github-actions[bot]"
               git config user.email "github-actions[bot]@users.noreply.github.com"
               git add ROADMAP.md
               git commit -m "chore: update roadmap progress [skip ci]" -m "Updated based on recent commits." -m "Generated with Claude Code GitHub Action"
               git push
               ```

            **Important:** Only update task completion status. Don't change task descriptions or add new versions. Use `[skip ci]` to prevent loops.

          claude_args: |
            --max-turns 30
            --model claude-sonnet-4-5-20250929
            --allowedTools "Read,Edit,Write,Bash(git:*),Bash(grep:*),Bash(test:*),Bash(ls:*),Bash(echo:*),Bash(head:*),Bash(tail:*),Bash(wc:*),Bash(cut:*)"
